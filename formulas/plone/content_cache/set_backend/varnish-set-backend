#!/usr/bin/python3

import collections
import datetime
import difflib
import jinja2
import json
import requests
import subprocess
import sys

from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

backends_file = "/etc/varnish/plone/50-backends.vcl"
backend_config = "/etc/varnish/plone-backend-config.json"


def test(addresses):
    if isinstance(addresses, str):
        addresses = [addresses]
    for address in addresses:
        strat = Retry(total=10, backoff_factor=0.1)
        adapter = HTTPAdapter(max_retries=strat)
        sesh = requests.Session()
        sesh.mount("http://", adapter)
        sesh.hooks[
            "response"
        ] = lambda response, *args, **kwargs: response.raise_for_status()
        response = sesh.get("http://%s/" % address, timeout=5)


try:
    with open(backend_config, "r") as p:
        config = json.load(p, object_pairs_hook=collections.OrderedDict)
except FileNotFoundError:
    config = collections.OrderedDict(
        {
            "director": collections.OrderedDict(),
            "backends": collections.OrderedDict(),
        }
    )


args = sys.argv[1:]
if args[0] == "--delete":
    args = args[1:]
    delete = True
    backend = args[0]
    director = None
else:
    delete = False
    backend, addresses = args[0:2]
    addresses = json.loads(addresses)
    try:
        director = json.loads(args[2])
        for d in config["director"]:
            if "host_regex" not in d:
                d["host_regex"] = ".*"
            if "url_regex" not in d:
                d["url_regex"] = ".+"
            if "site" not in d:
                d["site"] = None
            if "folder" not in d:
                d["folder"] = None
            if "vh" in d:
                d["vh"] = "/".join("vh_" + x for x in d["vh"].split("/"))
    except IndexError:
        director = None


if director is not None:
    config["director"] = director


def remove_directors_that_use_nonexistent_deployments():
    for n, v in enumerate(config["director"]):
        dep = v.get("deployment", None)
        if dep is not None and dep not in config["backends"]:
            print(
                f"Warning: director entry {n} directs to undefined deployment {dep}",
                file=sys.stderr,
            )
            config["director"][n] = None
    config["director"] = [x for x in config["director"] if x is not None]


if delete:
    if backend in config["backends"]:
        del config["backends"][backend]
    remove_directors_that_use_nonexistent_deployments()

else:
    if isinstance(addresses, str):
        host = addresses.split(":")[0]
        if not host or host == "0.0.0.0":
            host = "127.0.0.1"
        port = addresses.split(":")[1]

        config["backends"][backend] = {
            "targets": [{
                "host": host,
                "port": port,
            }],
        }
    else:
        config["backends"][backend] = {
            "targets": [],
        }
        for address in addresses:
            host = address.split(":")[0]
            if not host or host == "0.0.0.0":
                host = "127.0.0.1"
            port = address.split(":")[1]

            config["backends"][backend]["targets"].append({
                "host": host,
                "port": port,
            })
    # Migrate existing data.
    for v in config["backends"].values():
        if "targets" not in v and "host" in v and "port" in v:
            v["targets"] = [{"host": v["host"], "port": v["port"]}]
            del v["host"]
            del v["port"]

    remove_directors_that_use_nonexistent_deployments()

    for backend in config["backends"]:
        for s in ["site", "sites"]:
            if s in config["backends"][backend]:
                del config["backends"][backend][s]

if config["backends"]:
    config["default_backend"] = list(config["backends"])[0]
else:
    config["default_backend"] = None


tpl = jinja2.Template(
    """vcl 4.1;

import directors;

{%-   for backend_name, backend in backends.items() %}
{%-     for target in backend.targets %}
backend plone_{{ backend_name }}_{{ loop.index }} {
    .host = "{{ target.host }}";
    .port = "{{ target.port }}";
    .max_connections = 90;
    .connect_timeout = 10s;
    .probe = {
        .url = "/";
        .timeout = 9s;
        .interval = 10s;
    }
}
{%-     endfor %}
{%-   endfor %}

sub vcl_init {
{%-   for backend_name, backend in backends.items() %}
    new director_plone_{{ backend_name }} = directors.round_robin();
{%-     for target in backend.targets %}
    director_plone_{{ backend_name }}.add_backend(plone_{{ backend_name }}_{{ loop.index }});
{%-     endfor %}
{%-   endfor %}
}

sub vcl_recv {

    if (req.url ~ "^/@@metrics$") {
        set req.backend_hint = director_plone_{{ default_backend }}.backend();
        set req.http.Plone-Backend = "{{ default_backend }}";
        return(pass);
    }

{%-   for backend_name in backends %}
    if (req.url ~ "/deployments/{{ backend_name }}($|/)") {
        if (!req.http.Authorization) {
            set req.http.WWW-Authenticate = {"Basic realm="Zope""};
            return (synth(801, "You need to authenticate"));
        }

        set req.backend_hint = director_plone_{{ backend_name }}.backend();
        set req.http.Plone-Backend = "{{ backend_name }}";
        set req.url = regsub(req.url, "^/deployments/{{ backend_name }}", "/VirtualHostBase/" + req.http.X-Forwarded-Proto + "/" + req.http.Host + "/VirtualHostRoot/_vh_deployments/_vh_{{ backend_name }}");
        return(pass);
    }
{%-   endfor %}

{%-   for director_data in director %}

    if (!req.http.Plone-Backend) {

        if (req.http.Host ~ "{{ director_data.host_regex }}" && req.url ~ "{{ director_data.url_regex }}") {

{%-       if director_data.site %}
            set req.http.Site = "/{{ director_data.site }}";
{%        else %}
            set req.http.Site = "";
{%-       endif %}

{%-       if director_data.folder %}
            set req.http.Folder = "/{{ director_data.folder }}";
{%        else %}
            set req.http.Folder = "";
{%-       endif %}

{%-       if director_data.skip_folder_for | default(None) %}
            if (req.url ~ "{{ director_data.skip_folder_for }}") {
              set req.http.Folder = "";
            }
{%-       endif %}

{%-       if director_data.vh | default(False) %}
            set req.http.VH = "/{{ director_data.vh }}";
{%        else %}
            set req.http.VH = "";
{%-       endif %}


          set req.backend_hint = director_plone_{{ director_data.deployment | default(default_backend) }}.backend();
          set req.http.Plone-Backend = "{{ director_data.deployment | default(default_backend) }}";
          set req.url = regsub(req.url, "^", "/VirtualHostBase/" + req.http.X-Forwarded-Proto + "/" + req.http.Host + req.http.Site + req.http.Folder + "/VirtualHostRoot" + req.http.VH);

        }

    }

{%-   endfor %}

}

sub vcl_synth {
    if (resp.status == 801) {
        set resp.http.WWW-Authenticate = req.http.WWW-Authenticate;
        set resp.status = 401;
        return (deliver);
    }
}

"""
)

try:
    rendered = tpl.render(**config)
except Exception:
    assert 0, config


try:
    with open(backends_file) as b:
        existing = b.read()
except FileNotFoundError:
    existing = ""


if rendered != existing:

    diff = difflib.unified_diff(
        existing.splitlines(),
        rendered.splitlines(),
        backends_file,
        backends_file,
        datetime.datetime.now().astimezone().isoformat(),
        datetime.datetime.now().astimezone().isoformat(),
        3,
    )

    print("Diff:", file=sys.stderr)
    print("\n".join(diff), file=sys.stderr)

    if not delete:
        print("Ensuring new addresses %s responds with HTTP 200..." % addresses, file=sys.stderr)
        test(addresses)

    with open(backends_file, "w") as b:
        b.write(rendered)

    print("Reloading varnish...", file=sys.stderr)
    proc = subprocess.run(
        ["systemctl", "--system", "reload", "varnish.service"],
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    if proc.returncode != 0:
        with open(backends_file, "w") as b:
            b.write(existing)
        print("Failed to reload varnish: %s" % proc.stdout, file=sys.stderr)
        print("Failed config:", file=sys.stderr)
        print(rendered, file=sys.stderr)
        sys.exit(proc.returncode)

    if delete:
        comment = "Deleted backend %s." % (backend,)
    else:
        comment = "Set backend %s to %s." % (backend, address)
    out = json.dumps(
        {
            "changed": True,
            "comment": comment,
        }
    )
    print(out)
    sys.stdout.flush()

    with open(backend_config, "w") as p:
        json.dump(config, p)
