#!/usr/bin/python3

import collections
import datetime
import difflib
import jinja2
import json
import requests
import subprocess
import sys

from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

backends_file = "/etc/varnish/plone/50-backends.vcl"
backend_config = "/etc/varnish/plone-backend-config.json"


def test(address):
    strat = Retry(total=8, backoff_factor=0.1)
    adapter = HTTPAdapter(max_retries=strat)
    sesh = requests.Session()
    sesh.mount("http://", adapter)
    sesh.hooks[
        "response"
    ] = lambda response, *args, **kwargs: response.raise_for_status()
    response = sesh.get("http://%s/" % address, timeout=5)


try:
    with open(backend_config, "r") as p:
        config = json.load(p, object_pairs_hook=collections.OrderedDict)
except FileNotFoundError:
    config = collections.OrderedDict(
        {
            "director": collections.OrderedDict(),
            "backends": collections.OrderedDict(),
        }
    )


args = sys.argv[1:]
if args[0] == "--delete":
    args = args[1:]
    delete = True
    backend = args[0]
    director = None
else:
    delete = False
    backend, address = args[0:2]
    try:
        director = json.loads(args[2])
    except IndexError:
        director = None


if director is not None:
    config["director"] = director


def remove_directors_that_use_nonexistent_deployments():
    for k, v in list(config["director"].items()):
        if "deployment" not in v:
            if config["backends"]:
                v["deployment"] = list(config["backends"].keys())[0]
        dep = v["deployment"]
        if dep not in config["backends"]:
            print(
                f"Warning: host {k} directs to undefined deployment {dep}",
                file=sys.stderr,
            )
            del config["director"][k]


if delete:
    if backend in config["backends"]:
        del config["backends"][backend]
    remove_directors_that_use_nonexistent_deployments()

else:
    host = address.split(":")[0]
    if not host or host == "0.0.0.0":
        host = "127.0.0.1"
    port = address.split(":")[1]

    config["backends"][backend] = {
        "host": host,
        "port": port,
    }
    remove_directors_that_use_nonexistent_deployments()

    try:
        site = json.loads(args[2])
        if type(site) is str:
            config["backends"][backend]["site"] = site
            config["backends"][backend]["sites"] = {}
        else:
            config["backends"][backend]["site"] = ""
            config["backends"][backend]["sites"] = site
    except IndexError:
        pass


if config["backends"]:
    config["default_backend"] = list(config["backends"])[0]
else:
    config["default_backend"] = None


tpl = jinja2.Template(
    """vcl 4.1;

{%- if not backends %}

backend default none;

{%- else %}

{%-   for backend_name, backend in backends.items() %}
backend plone_{{ backend_name }} {
   .host = "{{ backend.host }}";
   .port = "{{ backend.port }}";
}
{%-   endfor %}

sub vcl_recv {

    if (!req.http.Plone-Backend) {

{%-   if default_backend %}
        set req.backend_hint = plone_{{ default_backend }};
        set req.http.Plone-Backend = "{{ default_backend }}";
{%-   endif %}

{%-   for backend_name in backends %}
        if (req.url ~ "/deployments/{{ backend_name }}($|/)") {
            set req.backend_hint = plone_{{ backend_name }};
            set req.http.Plone-Backend = "{{ backend_name }}";
            set req.url = regsub(req.url, "^/deployments/{{ backend_name }}", "/VirtualHostBase/" + req.http.X-Forwarded-Proto + "/" + req.http.Host + "/VirtualHostRoot/_vh_deployments/_vh_{{ backend_name }}");
            return(pass);
        }
{%-   endfor %}

{%-   for host, director_data in director.items() %}

        if (req.http.Host == "{{ host }}") {

{%-       if director_data.site | default(None) %}
            set req.http.Site = "/{{ director_data.site }}";
{%        else %}
            set req.http.Site = "";
{%-       endif %}

{%-       if director_data.deployment | default(None) %}
            set req.backend_hint = plone_{{ director_data.deployment }};
            set req.http.Plone-Backend = "{{ director_data.deployment }}";
{%-       endif %}

        }

{%-   endfor %}

        set req.url = regsub(req.url, "^", "/VirtualHostBase/" + req.http.X-Forwarded-Proto + "/" + req.http.Host + req.http.Site + "/VirtualHostRoot");

    }

}

{% endif %}
"""
)

try:
    rendered = tpl.render(**config)
except Exception:
    assert 0, config


try:
    with open(backends_file) as b:
        existing = b.read()
except FileNotFoundError:
    existing = ""


if rendered != existing:

    diff = difflib.unified_diff(
        existing.splitlines(),
        rendered.splitlines(),
        backends_file,
        backends_file,
        datetime.datetime.now().astimezone().isoformat(),
        datetime.datetime.now().astimezone().isoformat(),
        3,
    )

    print("Diff:", file=sys.stderr)
    print("\n".join(diff), file=sys.stderr)

    if not delete:
        print("Ensuring new address responds with HTTP 200...", file=sys.stderr)
        test(address)

    with open(backends_file, "w") as b:
        b.write(rendered)

    print("Reloading varnish...", file=sys.stderr)
    proc = subprocess.run(
        ["systemctl", "--system", "reload", "varnish.service"],
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    if proc.returncode != 0:
        with open(backends_file, "w") as b:
            b.write(existing)
        print("Failed to reload varnish: %s" % proc.stdout, file=sys.stderr)
        print("Failed config:", file=sys.stderr)
        print(rendered, file=sys.stderr)
        sys.exit(proc.returncode)

    if delete:
        comment = "Deleted backend %s." % (backend,)
    else:
        comment = "Set backend %s to %s." % (backend, address)
    out = json.dumps(
        {
            "changed": True,
            "comment": comment,
        }
    )
    print(out)
    sys.stdout.flush()

    with open(backend_config, "w") as p:
        json.dump(config, p)
