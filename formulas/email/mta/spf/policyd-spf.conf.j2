#  Amount of debugging information logged.  0 logs no debugging messages
#  5 includes all debug messages.
debugLevel = {{ debugLevel | default(1) }}

TestOnly = {{ TestOnly | default(0) }}

#  HELO check rejection policy. Options are:
#  HELO_reject = SPF_Not_Pass - Reject if result not Pass/None/Tempfail.
#  HELO_reject = Softfail - Reject if result Softfail and Fail
#  HELO_reject = Fail (default) - Reject on HELO Fail
#  HELO_reject = Null - Only reject HELO Fail for Null sender (SPF Classic)
#  HELO_reject = False - Never reject/defer on HELO, append header only. 
#  HELO_reject = No_Check - Never check HELO.
HELO_reject = {{ HELO_reject }}

#  HELO pass restriction policy.
#  HELO_pass_restriction = helo_passed_spf - Apply the given restriction when
#    the HELO checking result is Pass.  The given restriction must be an
#    action as defined for a Postfix SMTP server access table access(5).
{%- if HELO_pass_restriction is defined %}
HELO_pass_restriction = {{ HELO_pass_restriction }}
{%- else %}
#HELO_pass_restriction
{%- endif %}

#  Mail From rejection policy.  Options are:
#  Mail_From_reject = SPF_Not_Pass - Reject if result not Pass/None/Tempfail.
#  Mail_From_reject = Softfail - Reject if result Softfail and Fail
#  Mail_From_reject = Fail (default) - Reject on Mail From Fail (default)
#  Mail_From_reject = False - Never reject/defer on Mail From, append header only
#  Mail_From_reject = No_Check - Never check Mail From/Return Path.
Mail_From_reject = {{ Mail_From_reject }}

#  Reject only from domains that send no mail. Options are:
#  No_Mail = False - Normal SPF record processing (default)
#  No_Mail = True - Only reject for "v=spf1 -all" records

#  Mail From pass restriction policy.
#  Mail_From_pass_restriction = mfrom_passed_spf - Apply the given
#    restriction when the Mail From checking result is Pass.  The given 
#    restriction must be an action as defined for a Postfix SMTP server
#    access table access(5).
{%- if Mail_From_pass_restriction is defined %}
Mail_From_pass_restriction = {{ Mail_From_pass_restriction }}
{%- else %}
#Mail_From_pass_restriction
{%- endif %}

#  Reject mail for Netural/Softfail results for these domains.
#  Recevier policy option to reject mail from certain domains when SPF is not
#  Pass/None even if their SPF record does not produce a Fail result.  This
#  Option does not change the effect of PermError_reject or TempError_Defer
{%- if Reject_Not_Pass_Domains is defined %}
Reject_Not_Pass_Domains = {{ Reject_Not_Pass_Domains|join(",") }}
{%- else %}
#  Reject_Not_Pass_Domains = aol.com,hotmail.com
{%- endif %}

#  Policy for rejecting due to SPF PermError.  Options are:
#  PermError_reject = True
#  PermError_reject = False
PermError_reject = {{ PermError_reject }}

#  Policy for deferring messages due to SPF TempError.  Options are:
#  TempError_Defer = True
#  TempError_Defer = False
TempError_Defer = {{ TempError_Defer }}

#  Prospective SPF checking - Check to see if mail sent from the defined IP
#  address would pass.
#  Prospective = 192.168.0.4

#  Do not check SPF for localhost addresses - add to skip addresses to 
#  skip SPF for internal networks if desired. Defaults are standard IPv4 and
#  IPv6 localhost addresses.
skip_addresses = 127.0.0.0/8,::ffff:127.0.0.0/104,::1

#  Whitelist: CIDR Notation list of IP addresses not to check SPF for.
#  Example (default is no whitelist):
{%- if Whitelist is defined %}
Whitelist = {{ Whitelist | join(",") }}
{%- else %}
#  Whitelist = 192.168.0.0/31,192.168.1.12
{%- endif %}

#  HELO_Whitelist: comma separated HELO/EHLO host name list to skip SPF checks for.
#  Example (default is no whitelist):
{%- if HELO_Whitelist is defined %}
HELO_Whitelist = {{ HELO_Whitelist | join(",") }}
{%- else %}
#  HELO_Whitelist = relay.example.com,sender.example.org
{%- endif %}

#  Domain_Whitelist: List of domains whose sending IPs (defined by passing
#  their SPF check should be whitelisted from SPF.
#  Example (default is no domain whitelist):
{%- if Domain_Whitelist is defined %}
Domain_Whitelist = {{ Domain_Whitelist | join(",") }}
{%- else %}
#  Domain_Whitelist = pobox.com,trustedforwarder.org
{%- endif %}

# Domain_Whitelist_PTR: List of domains to whitelist against SPF checks base
# on PTR match.
# Example (default is no PTR whitelist)
{%- if Domain_Whitelist_PTR is defined %}
Domain_Whitelist_PTR = {{ Domain_Whitelist_PTR | join(",") }}
{%- else %}
#  Domain_Whitelist_PTR = yahoo.com
{%- endif %}

# Type of header to insert to document SPF result. Can be Received-SPF (SPF)
# or Authentication Results (AR). It cannot be both.
# Examples: (default is Received-SPF):
# Header_Type = AR
# Header_Type = SPF

# Every Authentication-Results header field has an authentication identifier
# field ('Authserv_Id'). This is similar in syntax to a fully-qualified domain
# name. See policyd-spf.conf.5 and RFC 7001 paragraph 2.4 for details.
# Default is None.  Authserv-Id must be provided if Header_Type 'AR' is used.
# Authserv_Id = mx.example.com

# RFC 7208 recommends an elapsed time limit for SPF checks of at least 20
# seconds.  Lookup_Time allows the maximum time (seconds) to be adjusted.  20
# seconds is the default.
# Lookup_Time = 20

# RFC 7208 adds a new processing limit called "void lookup limit" (See section
# 4.6.4).  Default is 2, but it can be adjusted.  Only relevant for pyspf
# 2.0.9 and later.  Ignored for earlier releases.
# Void_Limit = 2
